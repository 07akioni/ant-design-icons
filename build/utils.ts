import assert = require('assert');
import chalk from 'chalk';
import fs = require('fs');
import { AbstractTree, Node } from './typings';

/**
 * Parse the node generated by parse5 into the abstract tree.
 * @param node the node that need parsing.
 * @param debugName debug name, used in assert statement.
 */
export function generateAbstractTree(node: Node, debugName?: string): AbstractTree {
  assert(node, debugName);
  assert(node.tagName === 'svg', debugName);
  const viewBox = node.attrs.find(({ name }) => name === 'viewBox');
  assert(viewBox, debugName);
  const size: number[] = viewBox!.value.split(' ').slice(2).map((str) => Number.parseInt(str));
  assert(
    size.length === 2,
    `The size tuple should be [ width, height ], but got [ ${size[0]}, ${size[1]} ] [${debugName}]`
  );
  const styleNode = node.childNodes.find(({ tagName }) => tagName === 'style');
  let styleContent = '';
  if (styleNode) {
    styleContent = styleNode.childNodes[0].value || '';
  }
  const oneLevelPathNodes = node.childNodes
    .filter(({ nodeName, childNodes }) => nodeName !== 'style' && childNodes.length === 0);
  assert(oneLevelPathNodes.length >= 1, debugName);

  const p = oneLevelPathNodes.map(({ nodeName, attrs }) => ({
    tag: nodeName,
    attrs: attrs.reduce(
      (acc: { [key: string]: string }, { name, value }) => {
        acc[name] = value;
        return acc;
      }, {}
    )
  }));

  return {
    width: size[0],
    height: size[1],
    style: styleContent,
    children: p
  };
}

/**
 * get the SVGO config.
 */
export function getSVGOPlugin() {
  return [
    { cleanupAttrs: true },
    { removeDoctype: true },
    { removeXMLProcInst: true },
    { removeComments: true },
    { removeMetadata: true },
    { removeTitle: true },
    { removeDesc: true },
    { removeUselessDefs: true },
    { removeEditorsNSData: true },
    { removeEmptyAttrs: true },
    { removeHiddenElems: true },
    { removeEmptyText: true },
    { removeEmptyContainers: true },
    { removeViewBox: false },
    { cleanupEnableBackground: true },
    { convertStyleToAttrs: true },
    { convertColors: true },
    { convertPathData: true },
    { convertTransform: true },
    { removeUnknownsAndDefaults: true },
    { removeNonInheritableGroupAttrs: true },
    { removeUselessStrokeAndFill: true },
    { removeUnusedNS: true },
    { cleanupIDs: true },
    { cleanupNumericValues: true },
    { moveElemsAttrsToGroup: true },
    { moveGroupAttrsToElems: true },
    { collapseGroups: true },
    { removeRasterImages: false },
    { mergePaths: true },
    { convertShapeToPath: true },
    { sortAttrs: true },
    { removeDimensions: true }
  ];
}

export function log(message: string) {
  return console.log(chalk.green(`ðŸŒŸ [Generate Icon Definition] ${message}`));
}
